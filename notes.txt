- bikin skema
- bikin database
- npm init -y
- npm i express ejs pg
- bikin .gitignore dan isi dengan node_modules
- buat koneksi ke database (bikin folder config / db)
- buat connection.js di folder db, buat koneksi disini https://node-postgres.com/features/connecting masuk ke sub menu Proogrammatic. Gunakan pool untuk membuat instance koneksi, sesuaikan konfigurasi dengan pengaturan database postgres
- buat 1 function async untuk mengexecute query pengecekkan koneksi, kalau sudah terkoneksi, comment async functionya kemudian module.exports pool nya
- buat table-table di database menggunakan file migration.js di dalam folder db, require pool dari connection, buat query untuk create table dan dahulukan pembuatan table yang tidak punya foreign key, setelah itu jalankan berurutan menggunakan async function (https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-create-table/)
- buat file seed.js di folder db, isi dengan query untuk bulk insert dari data json (baca isi data json menggunakan fs.readFileSync), dan execute query yang tidak punya foreign key terlebih dahulu menggunakan async function (https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-insert-multiple-rows/)


- konfigurasikan express 
- buat file dengan nama app.js dan buat konfigurasi awal express app (https://expressjs.com/en/starter/hello-world.html)
- app.set view engine => ejs 
- app.use express.urlencoded dan isi dengan object extended: true

- pembuatan routes
- buat folder routes dan isi dengan index.js
- require express.Router();
- buatt route2 yang diperlukan
- module.exports routernya
- app use hasil require routes di app.js

- MVC 
- siapkan folder MVC 
- buat file controller.js di folder controllers dan buat class Controller serta di module.exports 
- di models buat file sesuai banyaknya table yang dimiliki, buat masing-masing class di dalam models, sesuaikan contructor dan property di masing-masing class. Jangan lupa require pool di setiap class di models

- CRUD 
- Read dari index router ke Controller, ke static model di models, baca data menggunakan pool query, instantiate data yang berhasil di baca, return kembalikan ke Controller dan diteruskan menggunakan res.render ke view
- Create (get) dari index ke controller, meminta data ke model untuk dijadikan option di input select di ejs, tampilkan form untuk add data. (post) dari index menerima data ke dalam req.body melalui form ejs. tambahkan data menggunakan query dan dilanjukan dengan res.redirect ke halaman tertentu
- Update (get) dari index ke controller, meminta data ke model untuk dijadikan option di input select di ejs, dan data yang diedit untuk ditampilkan di value-value input di form ejs. tampilkan form untuk edit data. (post) dari index menerima data ke dalam req.body melalui form ejs. edit data menggunakan query dan dilanjukan dengan res.redirect ke halaman tertentu